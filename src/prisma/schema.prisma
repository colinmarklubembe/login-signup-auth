generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                     @unique
  password                String    
  name                    String    
  isVerified              Boolean?                   @default(false)
  verificationToken       String?
  forgotPasswordToken     String? 
  userOrganizationRoles   UserOrganizationRole[]     @relation("UserOrganizationRoles")
  userType                UserType                   @default(USER)
  userDepartments         UserDepartment[]           @relation("UserDepartments")
  isActivated             Boolean                    @default(false)
  createdAt               DateTime?        
  updatedAt               DateTime?       
}

model Organization {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?
  address                 String
  phoneNumber             String
  organizationEmail       String                     @unique      
  userOrganizationRoles   UserOrganizationRole[]     @relation("UserOrganizationRoles")
  departments             Department[]               @relation("OrganizationDepartments")
  products                Product[]                  @relation("OrganizationProducts")
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Department {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?    
  organizationId          String                     @db.ObjectId
  organization            Organization               @relation("OrganizationDepartments", fields: [organizationId], references: [id])
  userDepartments         UserDepartment[]           @relation("UserDepartments")
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Role {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String                     @unique
  permissions             RolePermission[]           @relation("RolePermissions")
  userOrganizationRoles   UserOrganizationRole[]     @relation("UserOrganizationRoles")
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Permission {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String                     @unique
  description             String?
  roles                   RolePermission[]           @relation("RolePermissions")
}

model Product {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?
  organizationId          String                     @db.ObjectId
  organization            Organization               @relation("OrganizationProducts", fields: [organizationId], references: [id])
  unitPrice               Int
  quantity                Int
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Tasks {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String?
  dueDate                 DateTime
  status                  String
  priority                String
  assignedTo              String                     @db.ObjectId
  assignedBy              String                     @db.ObjectId
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Contact {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  contactEmail       String      @unique
  phoneNumber String
  title       String
  leadStatus  LeadStatus  @default(LEAD)
  location    String?
  businessType BusinessType
  description String?
  addedByUserId String      
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model RolePermission {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  roleId                  String                     @db.ObjectId
  permissionId            String                     @db.ObjectId

  role                    Role                       @relation("RolePermissions", fields: [roleId], references: [id])
  permission              Permission                 @relation("RolePermissions", fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model UserOrganizationRole {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String                     @db.ObjectId
  organizationId          String                     @db.ObjectId
  roleId                  String                     @db.ObjectId

  user                    User                       @relation("UserOrganizationRoles", fields: [userId], references: [id])
  organization            Organization               @relation("UserOrganizationRoles", fields: [organizationId], references: [id])
  role                    Role                       @relation("UserOrganizationRoles", fields: [roleId], references: [id])

  @@unique([userId, organizationId, roleId])
}

model UserDepartment {
  id                      String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String                     @db.ObjectId
  departmentId            String                     @db.ObjectId

  user                    User                       @relation("UserDepartments", fields: [userId], references: [id])
  department              Department                 @relation("UserDepartments", fields: [departmentId], references: [id])

  @@unique([userId, departmentId])
}

enum UserType {
  OWNER
  ADMIN
  USER
}

enum LeadStatus {
  LEAD
  PROSPECT
  CLOSED
}

enum BusinessType {
  INDIVIDUAL
  BUSINESS
}

