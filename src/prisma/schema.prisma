generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String    
  email                   String              @unique
  password                String    
  verificationToken       String?   
  isVerified              Boolean?            @default(false)
  // role                    Role                @relation("AdminRoles")
  organizations           Organization[]      @relation("AdminOrganizations")
  createdAt               DateTime?        
  updatedAt               DateTime?       
}

model User {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  email                   String              @unique
  password                String    
  name                    String    
  isVerified              Boolean?            @default(false)
  verificationToken       String?   
  roles                   UserRole[]          @relation("UserRoles")
  userType                UserType            @default(USER)
  createdAt               DateTime?        
  updatedAt               DateTime?       
}

model Organization {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String          
  adminId                 String              @db.ObjectId
  admin                   Admin               @relation("AdminOrganizations", fields: [adminId], references: [id])
  departments             Department[]        @relation("OrganizationDepartments")
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Department {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String    
  organizationId          String              @db.ObjectId
  organization            Organization        @relation("OrganizationDepartments", fields: [organizationId], references: [id])
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model Role {
  id                      String              @id @default(auto()) @map("_id") @db.ObjectId
  name                    String              @unique
  permissions             RolePermission[]    @relation("RolePermissions")
  users                   UserRole[]          @relation("UserRoles")
  createdAt               DateTime? 
  updatedAt               DateTime? 
}

model UserRole {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String?              @db.ObjectId
  roleId                 String               @db.ObjectId

  user                   User?                @relation("UserRoles", fields: [userId], references: [id])
  role                   Role                 @relation("UserRoles", fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model Permission {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  name                   String               @unique
  description            String?
  roles                  RolePermission[]     @relation("RolePermissions")


}

model RolePermission {
  id                     String               @id @default(auto()) @map("_id") @db.ObjectId
  roleId                 String               @db.ObjectId
  permissionId           String               @db.ObjectId

  role                   Role                 @relation("RolePermissions", fields: [roleId], references: [id])
  permission             Permission           @relation("RolePermissions", fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

enum UserType {
  OWNER
  ADMIN
  USER
}