generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                                String
  email                               String          @unique
  password                            String
  verificationToken                   String?
  isVerified                          Boolean?        @default(false)
  isAdmin                             Boolean         @default(true)
  workspaces                          Workspace[]
  createdAt                           DateTime?        
  updatedAt                           DateTime?       
}

model User {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  email                               String          @unique
  password                            String
  name                                String
  isVerified                          Boolean?         @default(false)
  verificationToken                   String?
  isAdmin                             Boolean         @default(false)   
  // roleId                              String?         @db.ObjectId
  // role                                Role?           @relation("UserRoles", fields: [roleId], references: [id])
  // workspaceId                         String ?         @db.ObjectId
  // workspace                           Workspace?       @relation(fields: [workspaceId], references: [id])
  // departmentId                        String?         @db.ObjectId
  // department                          Department?     @relation(fields: [departmentId], references: [id])
  // headOfDepartments                   Department?     @relation("HeadOfDepartments")
  // messagesSent                        Message[]       @relation("MessagesSent")
  // messagesReceived Message[]                          @relation("MessagesReceived")
  // notifications                       Notification[]
  createdAt                           DateTime?        
  updatedAt                           DateTime?       
}

model Workspace {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                                String
  description                         String
  adminId                             String          @db.ObjectId
  admin                               Admin           @relation(fields: [adminId], references: [id])
  departments                         Department[]
  // users                               User[]
  roles                               Role[]
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
}

model Department {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                                String
  workspaceId                         String          @db.ObjectId
  workspace                           Workspace       @relation(fields: [workspaceId], references: [id])
  // users                               User[]
  headId                              String?         @unique @db.ObjectId
  // head                                User?           @relation("HeadOfDepartments", fields: [headId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
}

model Role {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  name                                String
  description                         String?
  workspaceId                         String          @db.ObjectId
  workspace                           Workspace       @relation(fields: [workspaceId], references: [id])
  // users                               User[]          @relation("UserRoles")
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
}

model Message {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  senderId                            String          @db.ObjectId
  // sender                              User            @relation("MessagesSent", fields: [senderId], references: [id])
  receiverId                          String          @db.ObjectId
  // receiver                            User            @relation("MessagesReceived", fields: [receiverId], references: [id])
  content                             String      
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
}

model Notification {
  id                                  String          @id @default(auto()) @map("_id") @db.ObjectId
  userId                              String          @db.ObjectId
  // user                                User            @relation(fields: [userId], references: [id])
  content                             String
  read                                Boolean         @default(false)
  createdAt                           DateTime        @default(now())
  updatedAt                           DateTime        @updatedAt
}

enum RoleName {
  ADMIN
  SALES
  CUSTOMER_SUPPORT
  MARKETING
  HEAD
  OTHER
}